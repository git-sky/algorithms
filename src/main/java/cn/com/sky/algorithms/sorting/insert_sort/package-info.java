package cn.com.sky.algorithms.sorting.insert_sort;

/**
 * <pre>
 * 
 *  插入排序
 *  
 *  插入排序的基本思想是：每步将一个待排序的纪录，按其关键码值的大小插入前面已经排序的文件中适当位置上，直到全部插入完为止。
 *  
 *  有一个已经有序的数据序列，要求在这个已经排好的数据序列中插入一个数，但要求插入后此数据序列仍然有序，这个时候就要用到一种新的排序方法——插入排序法,
 *  插入排序的基本操作就是将一个数据插入到已经排好序的有序数据中 ，从而得到一个新的、个数加一的有序数据，算法适用于少量数据的排序，时间复杂度为O(n^2)。
 *  是稳定的排序方法。
 *  插入算法把要排序的数组分成两部分 ：
 *  第一部分包含了这个数组的所有元素，但将最后一个元素除外（让数组多一个空间才有插入的位置），而第二部分就只包含这一个元素（即待插入元素）。
 *  在第一部分排序完成后，再将这个最后元素插入到已排好序的第一部分中。
 *  
 * 一、 直接插入排序(Insertion Sort)
 * 基本思想：每次将一个待排序的记录，按其关键字大小插入到前面已经排好序的子序列中的适当位置，直到全部记录插入完成为止。
 *  
 *  特性:
 *  时间复杂度:O(n^2) 
 *  稳定性：稳定
 *  
 *  性能：
 *  直接插入排序>简单选择排序>冒泡排序
 * 
 * 
 * 二、希尔排序
 * 
 * Shell排序是对直接插入排序算法的改进，属于插入排序的范畴，是对直接插入排序算法的改进。
 * 直接插入排序在基本有序时效率较高，并且在序列规模不是很大时效率也很高，Shell排序就是针对这两点进行改进。
 * 核心思想是：待排序列有n个元素，先取一个小于n的整数h1作为第一个增量，把待排序列以间隔h1分成若干子序列，子序列内使用插入排序；然后取第二个增量h2(< h1)，重复上述的划分和排序，直至所取的增量hl = 1 (h1 > h2 > ... > hl)。
 * 这样不管序列多么庞大，在先前较大步长分组下每个子序列规模都不是很大，用直接插入效率很高；后面步长变小，子序列变大，但由于整体有序性越来越明显，排序效率依然很高，大大提高了时间效率。
 * 
 * 性能分析：
 * Shell排序是一种不稳定的排序算法，文献表明其时间复杂度受增量序列的影响明显大于其他因素，最坏的情况是o(n2)，好的情况在o(n1.3)，与增量序列选择有关。
 * 给出比较常用的序列参考：Shell 最初建议步长选择为n/2，并且对步长取半直到步长达到 1。
 * 
 * 
 */
